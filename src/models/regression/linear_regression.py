from src.models.regression.base import BaseRegression
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
import numpy as np


class LinearRegressionModel(BaseRegression):
    """
    A Linear Regression model class that inherits from BaseRegression.
    This class implements the fit and predict methods
    using scikit-learn's LinearRegression.

    Attributes:
        model (LinearRegression): The linear regression model from scikit-learn.
        trained (bool): A flag indicating if the model has been trained.
    """

    def __init__(self, X: np.ndarray, y: np.ndarray):
        """
        Initialize the LinearRegressionModel with input features and target values.

        Args:
            X (np.ndarray): The input features (independent variables)
            for the regression.
            y (np.ndarray): The target variable (dependent variable)
            for the regression.
        """
        super().__init__("LinearRegression", X, y)
        self.model: LinearRegression = LinearRegression()

    def fit(self) -> None:
        """
        Train the linear regression model using
        the input features (X) and target values (y).

        This method fits the model using scikit-learn's LinearRegression fit method.
        """
        self.model.fit(self.X, self.y)

    def predict(self, X: np.ndarray) -> np.ndarray:
        """
        Make predictions using the trained linear regression model
        on the given input features.

        Args:
            X (np.ndarray): The input features for making predictions.

        Returns:
            np.ndarray: The predicted target values.
        """
        return self.model.predict(X)

    def evaluate(self, y_true: np.ndarray, y_pred: np.ndarray) -> float:
        """
        Evaluate the performance of the linear regression model.

        Args:
            y_true (np.ndarray): The true target values.
            y_pred (np.ndarray): The predicted values generated by the model.

        Returns:
            float: The R-squared value indicating the goodness of fit.
        """
        r_squared = r2_score(y_true, y_pred)
        return r_squared
